main.dart
    main()
      await NeoBoCore.init();

    _onGenerateRoute()
        Route ? boRoute = NeoBoCore.onBoGenerateRoutes(routeSettings);
        if (boRoute != null) {
            return boRoute;
        }
core/dependency_injection/dependency_injection.dart
        ..registerSingletonAsync<NeoNetworkManager>(
      () async => NeoNetworkManager(
        secureStorage: NeoCoreSecureStorage(),
        httpClientConfig: await NeoBoCore.httpClientConfig(),
      ),
    )
features/splash/splash_page.dart
      _navigateToWelcomePage() 
        navigationPath: NeoPageId.boHome,

lib/core/core_widgets/workflow_component_tree_builder/network/workflow_components_network_manager.dart

    Future<NeoResponse> fetchPageComponents(String source, String pageId, String type, String json) async {
        try {
        final response = await GetIt.I<NeoNetworkManager>().call(
            NeoHttpCall(
            endpoint: _Constants.endpointGetTransition,
            pathParameters: {
                _Constants.pathParameterSource: source,
                _Constants.pathParameterPageId: pageId,
            },
            queryProviders: [
                HttpQueryProvider({"type": type}),
                HttpQueryProvider({"json": json}),
            ],
            ),
        );
        debugPrint('\n[WorkflowComponentsNetworkManager] Fetch Page Components Response: $response');
        return NeoResponse.success(response);
        } on NeoException catch (exception) {
        return NeoResponse.error(exception.error);
        }
    }

lib/core/core_widgets/workflow_component_tree_builder/workflow_component_tree_builder.dart
        build()
          case WorkflowFormioBuilderStateLoaded _:
            return Container(
              child: NeoWebView(source: WebViewSource.formio(state.formioData)),
            );
lib/core/core_widgets/workflow_component_tree_builder/bloc/workflow_component_tree_builder_state.dart

    class WorkflowFormioBuilderStateLoaded extends WorkflowComponentTreeBuilderState {
    final String formioData;

    const WorkflowFormioBuilderStateLoaded({required this.formioData});

    @override
    List<Object> get props => [formioData];
    }

lib/core/core_widgets/workflow_component_tree_builder/bloc/workflow_component_tree_builder_bloc.dart

            var response;
            response = await networkManager.fetchPageComponents(event.source, event.pageId, "flutterwidget", "1");
            if (response.isSuccess) {
            final componentsResponse = jsonEncode((response as NeoSuccessResponse).data["body"]);
            emit(
                WorkflowComponentTreeBuilderStateLoaded(componentsMap: jsonDecode(componentsResponse)),
            );
            } else {
            response = await networkManager.fetchPageComponents(event.source, event.pageId, "Formio", "0");
            if (response.isSuccess) {
                final componentsResponse = (response as NeoSuccessResponse).data["body"];
                emit(
                WorkflowFormioBuilderStateLoaded(formioData: componentsResponse),
                );
            } else {
                emit(
                WorkflowComponentTreeBuilderStateError(
                    // TODO: Select error message based on current language
                    errorMessage: (response as NeoErrorResponse).error.messages.firstOrNull?.title ?? "",
                ),
                );
            }
            }

lib/reusable_widgets/neo_button/bloc/neo_button_bloc.dart
         if (response["view-source"] == "transition") {
                var transition = (response["transition"] as List).firstWhereOrNull((element) => element["type"] == "Forward");
                if (transition != null) {
                emit(
                    NeoButtonState(
                    navigationData: SignalrTransitionData(
                        navigationPath: transition["transition"],
                        // STOPSHIP: Get from API
                        navigationType: NeoNavigationType.push,
                        pageId: response["state"],
                        viewSource: response["view-source"],
                        initialData: {},
                        isBackNavigation: false,
                    ),
                    ),
                );
                }
            } else {
                emit(
                NeoButtonState(
                    navigationData: SignalrTransitionData(
                    navigationPath: response["state"],
                    // STOPSHIP: Get from API
                    navigationType: NeoNavigationType.push,
                    pageId: response["state"],
                    viewSource: response["view-source"],
                    initialData: {},
                    isBackNavigation: false,
                    ),
                ),
                );
            }